Key Updates:

    Background Responsiveness:
        For smaller screens (max-width: 768px), the background size switches to contain to ensure the full sniper image is visible without cropping.
        For larger screens, it remains cover to provide a more immersive effect.

    Text Scaling:
        Font sizes for the <h1>, <p>, and button (.btn) dynamically reduce for smaller screens to maintain readability and proper spacing.

    Content Width:
        The .content width is set to 90% to ensure it fits within smaller viewports without horizontal scrolling.

    Media Queries:
        Adjustments are made at two breakpoints: 768px (tablets) and 480px (mobile devices).

==
	General Reset Styles:

margin: 0; and padding: 0;: Removes any default spacing around the page to ensure the layout starts from the very edge of the viewport.
box-sizing: border-box;: Ensures padding and borders are included in the element's total width and height, making sizing easier to manage.
font-family: Arial, sans-serif;: Sets a clean, readable font for the entire page.
height: 100%;: Ensures the body and html elements stretch to fill the entire height of the viewport.
overflow: hidden;: Prevents scrolling, ensuring the layout remains fixed within the visible viewport.

	Background Styling:

background: url('sniper.png') no-repeat center center;:

    Sets the sniper image as the background.
    no-repeat: Prevents the image from repeating.
    center center: Aligns the image to the center of the viewport both horizontally and vertically.

background-size: cover;: Ensures the image covers the entire viewport while maintaining its aspect ratio. Parts of the image may be cropped if the viewport size doesn’t match the image dimensions.
position: relative;: Allows for child elements to be positioned relative to this container.

	Overlay:

background-color: rgba(0, 0, 0, 0.6);: Adds a semi-transparent black overlay over the background image to reduce its brightness, ensuring text is readable.

    rgba(0, 0, 0, 0.6) stands for Red, Green, Blue, and Alpha (opacity). Here, the alpha value 0.6 makes the overlay 60% opaque.

width: 100%; and height: 100%;: Ensures the overlay covers the entire viewport.
display: flex;: Activates Flexbox layout to easily center child elements.
justify-content: center;: Horizontally centers the child element (content).
align-items: center;: Vertically centers the child element (content).

	Content Styling:

text-align: center;: Centers the text horizontally within the .content container.
color: #ffffff;: Sets the text color to white.
padding: 20px;: Adds spacing inside the .content container for better aesthetics.
width: 90%;: Limits the content width to 90% of the viewport, ensuring it fits nicely on smaller screens.

	Heading and Paragraph:

Heading (h1):

    font-size: 3rem;: Sets a large font size for the heading.
    margin-bottom: 20px;: Adds spacing below the heading.
    text-transform: uppercase;: Converts text to uppercase.
    letter-spacing: 2px;: Adds spacing between letters for a military-style aesthetic.

Paragraph (p):

    font-size: 1.2rem;: Sets a medium font size for readability.
    margin-bottom: 30px;: Adds spacing below the paragraph.
    line-height: 1.5;: Increases the line spacing for better readability.

	Button

Default Button (.btn):

    text-decoration: none;: Removes the default underline for links.
    background-color: #006400;: Sets a dark green background color.
    color: #ffffff;: Sets the button text color to white.
    padding: 10px 20px;: Adds space inside the button for better clickability.
    border-radius: 5px;: Rounds the corners slightly.
    font-size: 1rem;: Sets a standard font size for the button.
    text-transform: uppercase;: Converts text to uppercase.
    transition: background-color 0.3s;: Smoothly transitions the background color when hovered.

Hover Effect (.btn:hover):

    Changes the background color to a lighter green (#228B22) when the user hovers over the button.

	Media Queries for Responsiveness

For Tablet Screens (max-width: 768px)

background-size: contain;: Adjusts the background image to fit entirely within the viewport, ensuring no part of the image is cropped.
Smaller Font Sizes: Reduces the font size of the heading (2rem), paragraph (1rem), and button (0.9rem) to fit smaller screens.
Button Padding: Reduces padding to make the button smaller and proportional.

For Mobile Screens (max-width: 480px)

Further reduces the font sizes and button dimensions for very small screens like smartphones (max-width: 480px).

++++

can you explain to me this line, "height: calc(100% - 5px)" in .overlay class.

The CSS property `height: calc(100% - 50px)` in the `.overlay` class dynamically calculates the height of the `.overlay` element to ensure it doesn't overlap the footer.



Here’s a detailed explanation of each part:
 

1. **`height`**:
   - Specifies the height of the `.overlay` element. Normally, you can use fixed values like `100%`, `50px`, or relative values like `vh` (viewport height). Here, `calc()` is used for a dynamic calculation.


2. **`calc()`**:
   - The `calc()` function allows you to perform mathematical operations directly in CSS. It can combine units (like percentages, pixels, etc.) to calculate a dynamic value.


3. **`100%`**:
   - Represents the full height of the parent element (in this case, the `<body>` or `<html>` element, which spans the entire viewport).


4. **`- 50px`**:
   - Subtracts 50 pixels from the calculated `100%` height. This subtraction ensures that the `.overlay` does not extend into the area reserved for the footer, which is 50 pixels tall.



### Purpose

By using `height: calc(100% - 50px)`, the `.overlay`:


- Stretches to fill the entire viewport height **minus the height of the footer**.

- Dynamically adjusts to the size of the viewport, ensuring a responsive design.

- Prevents the `.overlay` from covering the footer, ensuring the footer remains visible.



### Visual Example


- If the viewport height is `800px`:
  
	- `100%` of the height = `800px`.
  
	- `calc(100% - 50px)` = `800px - 50px = 750px`.
  
	- The `.overlay` height will be `750px`, leaving `50px` for the footer.



### Why Use `calc()`?



- **Flexibility**: Allows mixing of units (e.g., percentages and pixels).

- **Responsiveness**: Adjusts dynamically as the viewport size changes.

- **Clean Design**: Ensures no overlap or hidden elements.



This approach is particularly useful when you need to reserve space for fixed elements like headers or footers while keeping the rest of the layout fluid and responsive.